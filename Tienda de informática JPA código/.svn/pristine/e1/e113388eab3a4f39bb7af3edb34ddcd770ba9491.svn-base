package Presentación.FrameTienda;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JOptionPane;


import Negocio.Tarea.TransferLineaTarea;
import Negocio.Tarea.TransferTarea;
import Presentación.*;
import Presentación.Controlador.AppControlador;
import Presentación.Controlador.Context;
import Presentación.Controlador.EventoNegocio;
import Presentación.Tarea.JFrameTarea;


public class JFrameTareaImp extends JFrameTarea {

    /**
     * Creates new form JFrameTarea
     */
	public JFrameTareaImp() {
    	super("Tarea");
        initComponents();
        idTarea.setEnabled(false);
       idEmpleado.setEnabled(false);
       horas.setEnabled(false);
       modifica.setEnabled(false);
       modifica.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox();
        idTarea = new javax.swing.JTextField();
        descripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        idEmpleado = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        horas = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        modifica = new javax.swing.JButton();
        ok = new javax.swing.JButton();

        //==================================================================================== 
        //==================================================================================== 
        
        ok.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	okActionPerformed(evt);
            }
        }
        );
        
        modifica.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	modificaActionPerformed(evt);
            }
        }
        );
        
        
        
        //==================================================================================== 
        //==================================================================================== 
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID Tarea");

        jLabel2.setText("Descripcion");

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALTA", "BAJA", "MUESTRA", "MUESTRA TODAS", "MODIFICA", "ASIGNA EMPLEADO", "DESASIGNA EMPLEADO" }));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre");

        jLabel4.setText("ID Empleado");

        jLabel5.setText("Num horas");

        area.setEditable(false);
        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        modifica.setText("Modifica");

        ok.setText("OK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(comboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabel2)
                                                        .addGap(40, 40, 40)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel4)
                                                    .addGap(34, 34, 34)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(43, 43, 43)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(descripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                            .addComponent(idTarea)
                                            .addComponent(nombre)
                                            .addComponent(idEmpleado)
                                            .addComponent(horas))))
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(modifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 228, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idTarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(idEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifica)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(horas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ok)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
    	 String opcion = comboBox.getSelectedItem().toString();
    	 //Poner los .setEnabled(false) que correspondan en cada if
         if(opcion.equals("ALTA")){
             idTarea.setEnabled(false);
             nombre.setEnabled(true);
            descripcion.setEnabled(true);
            idEmpleado.setEnabled(false);
            horas.setEnabled(false);
            modifica.setEnabled(false);
            modifica.setVisible(false);
         }
         if(opcion.equals("BAJA")){
        	  idTarea.setEnabled(true);
              nombre.setEnabled(false);
             descripcion.setEnabled(false);
             idEmpleado.setEnabled(false);
             horas.setEnabled(false);
             modifica.setEnabled(false);
             modifica.setVisible(false);
         }
         	
         if(opcion.equals("MUESTRA")){
        	  idTarea.setEnabled(true);
              nombre.setEnabled(false);
             descripcion.setEnabled(false);
             idEmpleado.setEnabled(false);
             horas.setEnabled(false);
             modifica.setEnabled(false);
             modifica.setVisible(false);
         }
         
         if(opcion.equals("MUESTRA TODAS")){
        	  idTarea.setEnabled(false);
              nombre.setEnabled(false);
             descripcion.setEnabled(false);
             idEmpleado.setEnabled(false);
             horas.setEnabled(false);
             modifica.setEnabled(false);
             modifica.setVisible(false);
         }

         if(opcion.equals("MODIFICA")){
        	 idTarea.setEnabled(true);
             nombre.setEnabled(false);
            descripcion.setEnabled(false);
            idEmpleado.setEnabled(false);
            horas.setEnabled(false);
            modifica.setVisible(true);
            modifica.setEnabled(false);
         }

         if(opcion.equals("ASIGNA EMPLEADO")){
        	 idTarea.setEnabled(true);
             nombre.setEnabled(false);
            descripcion.setEnabled(false);
            idEmpleado.setEnabled(true);
            horas.setEnabled(true);
         }

         if(opcion.equals("DESASIGNA EMPLEADO")){
        	 idTarea.setEnabled(true);
             nombre.setEnabled(false);
            descripcion.setEnabled(false);
            idEmpleado.setEnabled(true);
            horas.setEnabled(false);
         }
         
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameTareaImp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameTareaImp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameTareaImp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameTareaImp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameTareaImp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JTextField descripcion;
    private javax.swing.JTextField horas;
    private javax.swing.JTextField idEmpleado;
    private javax.swing.JTextField idTarea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifica;
    private javax.swing.JTextField nombre;
    private javax.swing.JButton ok;
    // End of variables declaration//GEN-END:variables
    

  
    
    //==================================================================================== 
     //==================================================================================== 
    
    protected void okActionPerformed(ActionEvent evt) {
    	String opcion = comboBox.getSelectedItem().toString();
  	  Context contexto = new Context(0, null);
  	  
  	if(opcion.equals("ALTA")){
    	String nombreIntroducido = nombre.getText();
    	String descripcionIntroducida = descripcion.getText();
		TransferTarea tTarea = new TransferTarea();
		
		tTarea.setNombre(nombreIntroducido);
		tTarea.setDescripcion(descripcionIntroducida);
		tTarea.setActivo(true);
		contexto.setEvento(EventoNegocio.ALTA_TAREA);
		contexto.setDatos(tTarea);
		AppControlador.getInstancia().accion(contexto);
    }
        
        if(opcion.equals("BAJA")){
        	int id_Tarea = Integer.parseInt(idTarea.getText());
			TransferTarea tTarea = new TransferTarea();
			tTarea.setID(id_Tarea);
			contexto.setEvento(EventoNegocio.BAJA_TAREA);
    		contexto.setDatos(tTarea);
    		AppControlador.getInstancia().accion(contexto);
        }
        	
        if(opcion.equals("MUESTRA")){
        	int id_Tarea = Integer.parseInt(idTarea.getText());
			TransferTarea tTarea = new TransferTarea();
			tTarea.setID(id_Tarea);
			contexto.setEvento(EventoNegocio.MUESTRA_TAREA);
    		contexto.setDatos(tTarea);
    		AppControlador.getInstancia().accion(contexto);
        }
        
        if(opcion.equals("MUESTRA TODAS")){
        	contexto.setEvento(EventoNegocio.MUESTRA_TODAS_TAREAS);
    		contexto.setDatos(null);
    		AppControlador.getInstancia().accion(contexto);
        }

        if(opcion.equals("MODIFICA")){
        	int id_Tarea = Integer.parseInt(idTarea.getText());
			TransferTarea tTarea = new TransferTarea();
			tTarea.setID(id_Tarea);
			contexto.setEvento(EventoNegocio.MUESTRA_TAREA_TEXTFIELDS);
    		contexto.setDatos(tTarea);
    		AppControlador.getInstancia().accion(contexto);
        }

        if(opcion.equals("ASIGNA EMPLEADO")){
	  		ArrayList<Object> array = new ArrayList<Object>();

        	int id_Tarea = Integer.parseInt(idTarea.getText());
        	int id_Empleado = Integer.parseInt(idEmpleado.getText());
        	int numHoras = Integer.parseInt(horas.getText());
        	
        	array.add(id_Tarea);
        	array.add(id_Empleado);
        	array.add(numHoras);

			contexto.setEvento(EventoNegocio.ASIGNA_EMPLEADO);
    		contexto.setDatos(array);
    		AppControlador.getInstancia().accion(contexto);
        }

        if(opcion.equals("DESASIGNA EMPLEADO")){
        	ArrayList<Object> array = new ArrayList<Object>();

        	int id_Tarea = Integer.parseInt(idTarea.getText());
        	int id_Empleado = Integer.parseInt(idEmpleado.getText());

        	array.add(id_Tarea);
        	array.add(id_Empleado);
			contexto.setEvento(EventoNegocio.DESASIGNA_EMPLEADO);
    		contexto.setDatos(array);
    		AppControlador.getInstancia().accion(contexto);
        }
    
    }
    
    protected void modificaActionPerformed(ActionEvent evt) {
    	String opcion = comboBox.getSelectedItem().toString();
    	  Context contexto = new Context(0, null);
    	  
    	  if(opcion.equals("MODIFICA")){
    		  int id_Tarea = Integer.parseInt(idTarea.getText());
    		  String nombreIntroducido = nombre.getText();
          	String descripcionIntroducida = descripcion.getText();
  			TransferTarea tTarea = new TransferTarea();
  			
  			tTarea.setNombre(nombreIntroducido);
  			tTarea.setDescripcion(descripcionIntroducida);
  			tTarea.setID(id_Tarea);
  			tTarea.setActivo(true);
  			contexto.setEvento(EventoNegocio.MODIFICA_TAREA);
      		contexto.setDatos(tTarea);
      		AppControlador.getInstancia().accion(contexto);
          }
    }
    
    //==================================================================================== 
     //==================================================================================== 
    
	@Override
	public void update(Context contextEntrada) {
		int evento = contextEntrada.getEvento();
		Object datos = contextEntrada.getDatos();
		
		switch(evento) {
		case(EventoGUI.ALTA_TAREA_OK): {
			JOptionPane.showMessageDialog (
				null, "Tarea dada de alta con ID: " + (Integer)datos
			);
			break;
		}

		case(EventoGUI.ALTA_TAREA_ERROR): {
			JOptionPane.showMessageDialog(
					null, "Error al dar de alta la tarea"
				);
			break;
		}
		
		case(EventoGUI.BAJA_TAREA_OK): {
			JOptionPane.showMessageDialog (
				null, "Tarea dada de baja, con ID: " + ((TransferTarea)datos).getId()
			);
			//textFieldIdFactura.setText((Integer)datos);
			break;
		}
		
		case(EventoGUI.BAJA_TAREA_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Erro al dar de baja la tarea con ID: " + ((TransferTarea)datos).getId()
				);
				//textFieldIdFactura.setText((Integer)datos);
				break;
		}

		case(EventoGUI.MODIFICA_TAREA_OK): {
			JOptionPane.showMessageDialog (
				null, "Tarea modificada con éxito, ID: " + (Integer)datos
			);
			//textFieldIdFactura.setText((Integer)datos);
			break;
		}
		
		case(EventoGUI.MODIFICA_TAREA_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Error al modificar la tarea con  dicho ID"
				);
				//textFieldIdFactura.setText((Integer)datos);
				break;
		}
		
		
		case(EventoGUI.ASIGNA_EMPLEADO_OK): {
			JOptionPane.showMessageDialog (
					null, "Asignación realizada con éxito"
				);
				break;
		}
		
		case(EventoGUI.ASIGNA_EMPLEADO_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Error al realizar la asignación"
				);
				break;
		}
		
		case(EventoGUI.DESASIGNA_EMPLEADO_OK): {
			JOptionPane.showMessageDialog (
					null, "Desasignación realizada con éxito"
				);
				break;
		}
		
		case(EventoGUI.DESASIGNA_EMPLEADO_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Error al realizar la desasignación"
				);
				break;
		}
		
		case(EventoGUI.MUESTRA_TAREA_OK): {
			TransferTarea tTarea = (TransferTarea)datos;
			area.setText(area.getText() + "\n" + muestraTarea(tTarea) + "\n");
			break;
		}
		
		case(EventoGUI.MUESTRA_TAREA_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Error al mostrar la tarea con dicho ID"
				);
				//textFieldIdFactura.setText((Integer)datos);
				break;
		}
		
		case(EventoGUI.MUESTRA_TODAS_TAREAS_ERROR): {
			JOptionPane.showMessageDialog(null, "No hay ninguna tarea");
			break;
		}
		
		case(EventoGUI.MUESTRA_TODAS_TAREAS_OK): {
			 @SuppressWarnings("unchecked")
			ArrayList<TransferTarea> todasTareas = (ArrayList<TransferTarea>)datos;
			 area.setText("");
			for(int i = 0; i < todasTareas.size(); i++) {
				TransferTarea tTarea = todasTareas.get(i);
				area.setText(area.getText() +  muestraTarea(tTarea) + "\n");
			}
			
			break;
		}
		
		
		case(EventoGUI.MUESTRA_TAREA_TEXTFIELDS): {
			TransferTarea tTarea = (TransferTarea)datos;
			nombre.setText(tTarea.getNombre());
			descripcion.setText(tTarea.getDescripcion());
			nombre.setEnabled(true);
			descripcion.setEnabled(true);
			modifica.setEnabled(true);
			idTarea.setEnabled(false);
			break;
		}
		
		case(EventoGUI.MUESTRA_TAREA_TEXTFIELDS_ERROR): {
			JOptionPane.showMessageDialog (
					null, "Error al modificar la tarea con dicho ID"
				);
				//textFieldIdFactura.setText((Integer)datos);
				break;
		}
		
		} //FIN SWITCH
		
	} //Fin metodo update

	private String muestraTarea(TransferTarea tTarea) {
		String tareaMostrada = "";
		tareaMostrada += "---------Tarea--------- \n";
		tareaMostrada += "ID Tarea: " + tTarea.getId() + "\n";
		tareaMostrada += "Nombre: " + tTarea.getNombre() + "\n";
		tareaMostrada += "Descripcion: " + tTarea.getDescripcion() + "\n";
		tareaMostrada += "Activo: " + tTarea.getActivo() + "\n";
	//	tareaMostrada += "---------Esta tarea esta asignada a los empleados:--------- \n";
		//ArrayList<TransferLineaTarea> lineaTareas = (ArrayList<TransferLineaTarea>) tTarea.getLineaTarea();
		
	/*	for(int i = 0; i < lineaTareas.size(); i++) {
			tareaMostrada += "---------Producto " + (i+1) + "--------- \n";
			tareaMostrada += muestraLineaTarea((TransferLineaTarea)lineaTareas.get(i));
		}
	*/	
		tareaMostrada+= "\n";
		tareaMostrada+= "\n";
		return tareaMostrada;
	}
    
	
	private String muestraLineaTarea(TransferLineaTarea lTarea) {
		
		String lTareaMostrada = "";
		
		lTareaMostrada += "ID Empleado: " + lTarea.getIdEmpleado() + "\n";
		lTareaMostrada += "Horas: " + lTarea.getHoras() + "\n";

		return lTareaMostrada;
	}
	
	
}

